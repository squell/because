module PermutFacts
  use import int.Int
  use import array.Array
  use import array.ArrayPermut

  lemma permut_trans:
    forall a b c: array int, l u: int. 
      permut_sub a b l u /\ permut_sub b c l u -> permut_sub a c l u

  lemma permut_strength:
    forall a b: array int, l u: int.
      permut_sub a b l u -> permut_all a b

  lemma permut_shrink:
    forall a b: array int, l u: int.
      0 < u /\ permut a b l u /\ a [u-1] = b[u-1] -> permut a b l (u-1)
end

module StoogeSort

  use import int.Int
  use import int.ComputerDivision
  use import ref.Ref
  use import array.Array
  use import array.ArraySwap
  use import array.ArrayPermut
  use import array.ArrayEq
  use import map.Occ
  use import PermutFacts

  predicate mislocated (p: (array int,int,int)) (x: int) = let (a,i,j) = p in 
    exists y: int. i <= y < j /\ a[x] < a[y]

  clone import int.NumOfParam with type param = (array int,int,int), predicate pr = mislocated

  lemma all_num_of:
    forall a: array int, l u p q: int.
      l <= u /\ (forall i: int. l <= i < u -> mislocated (a,p,q) i) -> num_of (a,p,q) l u = u-l 

  lemma exists_num_of_pre_0:
    forall a: array int, l u p q: int.
      num_of (a,p,q) l u = 0 -> forall i: int. l <= i < u -> not mislocated (a,p,q) i

  lemma exists_num_of_pre_1:
    forall a: array int, l u p q: int.
      num_of (a,p,q) l u = 0 -> forall j: int. l <= j < u -> not exists i: int. p <= i < q /\ a[i] > a[j]

  lemma exists_num_of:
    forall a: array int, l u p q: int.
      num_of (a,p,q) l u = 0 -> forall i j: int. p <= i < q /\ l <= j < u -> a[i] <= a[j]

  lemma permut_mislocated_left:
    forall a1 a2: array int, i p q: int.
      not (p <= i < q)/\ permut_sub a1 a2 p q /\ a1[i] = a2[i] -> 
      mislocated (a2,p,q) i -> mislocated (a1,p,q) i

  lemma permut_num_of_left_weak:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 p q -> 
      num_of (a2,p,q) l u <= num_of (a1,p,q) l u

  lemma permut_num_of_left_weak_2:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 p q -> 
      num_of (a2,p,q) l u >= num_of (a1,p,q) l u

  lemma permut_num_of_left:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 p q -> 
      num_of (a1,p,q) l u = num_of (a2,p,q) l u

  let find_member (a: array int) (e: int) (l u: int): int
  requires { exists i: int. 0 <= l <= i < u <= length a /\ a[i] = e }
  ensures { l <= result < u }
  ensures { a[result] = e }
  = let pos = ref (l-1) in
    for i = l to u-1 do
      invariant { l-1 <= !pos < u }
      invariant { !pos >= l -> a[!pos] = e }
      invariant { !pos < l -> not exists j: int. l <= j < i /\ a[j] = e }
      if a[i] = e then pos := i
    done; !pos

  lemma array_eq_num_of:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 = length a2 /\ 
      array_eq_sub a1 a2 l u /\ array_eq_sub a1 a2 p q -> 
      num_of (a1,p,q) l u = num_of (a2,p,q) l u

  let lemma exchange_eq_num_of_weak (a1 a2: array int) (l u p q: int): unit
  requires { 0 <= p <= q <= l <= u < length a1 = length a2 }
  requires { exchange a1 a2 l u }
  ensures { num_of (a1,p,q) l (u+1) = num_of (a2,p,q) l (u+1) }
  =  assert { a1[l] = a2[u] };
     if l < u then (
      assert { array_eq_sub a1 a2 (l+1) u };
      assert { array_eq_sub a1 a2 p q };
      assert { mislocated (a1,p,q) l <-> mislocated (a2,p,q) u };
      assert { mislocated (a1,p,q) u <-> mislocated (a2,p,q) l };
      assert { num_of (a1,p,q) l (l+1) = num_of (a2,p,q) u (u+1) };
      assert { num_of (a2,p,q) l (l+1) = num_of (a1,p,q) u (u+1) };
      assert { num_of (a1,p,q) (l+1) u = num_of (a2,p,q) (l+1) u };
      assert { num_of (a1,p,q) l u     = num_of (a1,p,q) l (l+1) + num_of (a1,p,q) (l+1) u
                                       = num_of (a2,p,q) u (u+1) + num_of (a2,p,q) (l+1) u (* + num_of(a2,p,q) u (u+1) }; *) };
      assert { num_of (a1,p,q) l (u+1) = num_of (a1,p,q) l (l+1) + num_of (a1,p,q) (l+1) u + num_of (a1,p,q) u (u+1) 
                                       = num_of (a2,p,q) l (l+1) + num_of (a2,p,q) (l+1) u + num_of (a2,p,q) u (u+1) }
    )

  let lemma exchange_num_of (a1 a2: array int) (l u p q i j: int): unit
  requires { 0 <= p <= q <= l <= i <= j < u <= length a1 = length a2 }
  requires { exchange a1 a2 i j }
  ensures { num_of (a2,p,q) l u = num_of (a1,p,q) l u }
  = assert { array_eq_sub a1 a2 l i };
    assert { array_eq_sub a1 a2 (j+1) u };
    assert { array_eq_sub a1 a2 p q };
    assert { num_of (a2,p,q) l u = num_of (a2,p,q) l i + num_of (a2,p,q) i (j+1) + num_of (a2,p,q) (j+1) u 
                                 = num_of (a1,p,q) l i + num_of (a1,p,q) i (j+1) + num_of (a1,p,q) (j+1) u }

  let lemma permut_num_of_right_weak (a1 a2: array int) (l u p q: int): unit
  requires { 0 <= p <= q <= l <= u <= length a1 }
  requires { permut_sub a1 a2 l u }
  ensures { num_of (a2,p,q) l u <= num_of (a1,p,q) l u }
  = let b2 = copy a1 in
    assert { array_eq a1 b2 };
    assert { permut_sub a1 b2 p q };
    assert { permut_sub a1 b2 l u };
    for i = u-1 downto l do
      invariant { num_of (b2,p,q) l u <= num_of (a1,p,q) l u }
      invariant { permut_sub b2 a2 l (i+1) }
      assert { l <= i < u };
      assert { permut b2 a2 l (i+1) };
      assert { exists n: int. l <= n < i+1 /\ b2[n] = a2[i] };
      let x = find_member b2 a2[i] l (i+1) in
      'S: swap b2 x i;
      assert { permut_sub (at b2 'S) b2 l (i+1) };
      assert { permut_sub b2 a2 l (i+1) };
      assert { num_of (b2,p,q) l u <= num_of (at b2 'S,p,q) l u };
    done;
    assert { permut_sub b2 a2 p q };
    assert { num_of (a2,p,q) l u <= num_of (b2,p,q) l u }

(*
  lemma permut_num_of_right_weak:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 l u -> 
      num_of (a2,p,q) l u <= num_of (a1,p,q) l u
*)

  lemma permut_num_of_right_weak_2:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 l u -> 
      num_of (a2,p,q) l u >= num_of (a1,p,q) l u

  lemma permut_num_of_right:
    forall a1 a2: array int, l u p q: int.
      0 <= p <= q <= l <= u <= length a1 /\ permut_sub a1 a2 l u -> 
      num_of (a1,p,q) l u = num_of (a2,p,q) l u


  let rec stoogesort (a: array int) (first limit: int): unit
  variant { limit - first }
  requires { 0 <= first < limit <= length a }
  ensures { permut_sub (old a) a first limit }
  ensures { forall i j: int. first <= i <= j < limit -> a[i] <= a[j] }
  = 'Start:
    if a[first] > a[limit-1] then 
      swap a first (limit-1);
    assert { permut_sub (at a 'Start) a first limit };
    if limit - first > 2 then (
      let t = div (limit - first) 3 in

      stoogesort a first (limit - t);
      assert { num_of (a,first,first+t) (limit-t) limit <= t };
      assert { num_of (a,first,first+t) (first+t) (limit-t) = 0 };
      assert { num_of (a,first,first+t) (first+t) limit <= t };
      assert { permut_sub (at a 'Start) a first limit };
      stoogesort a (first+t) limit;
      assert { num_of (a,first,first+t) (first+t) limit <= t };
      assert { not exists i j: int. first+t <= i < limit-t <= j < limit /\ a[j] < a[i] };
      assert { num_of (a,first+t,limit-t) (limit-t) limit = 0 };
      assert { num_of (a,first,first+t) (limit-t) limit > 0 -> exists i: int. limit-t <= i < limit /\ mislocated (a,first,first+t) i };
      assert { num_of (a,first,first+t) (limit-t) limit > 0 -> forall i: int. first+t <= i < limit-t -> mislocated (a,first,first+t) i };
      assert { num_of (a,first,first+t) (limit-t) limit > 0 -> num_of (a,first,first+t) (first+t) (limit-t) = limit-t-(first+t) };
      assert { num_of (a,first,first+t) (limit-t) limit > 0 -> limit-t-(first+t)+1 <= num_of (a,first,first+t) (first+t) limit <= t };
      assert { limit-t-(first+t) >= t };
      assert { num_of (a,first,first+t) (limit-t) limit = 0 };
      assert { num_of (a,first,limit-t) (limit-t) limit = 0 };
      assert { permut_sub (at a 'Start) a first limit };
      assert { forall i j: int. limit-t <= i <= j < limit -> a[i] <= a[j] };
      'Z: stoogesort a first (limit - t);
      assert { num_of (a,first,limit-t) (limit-t) limit = 0 };
      assert { forall i: int. limit-t <= i < limit -> a[i] = (at a 'Z)[i] };
      assert { forall i j: int. limit-t <= i <= j < limit -> a[i] <= a[j] };
      assert { forall i j: int. first <= i < limit-t <= j < limit -> a[i] <= a[j] };
    )

  let sort (a: array int): unit
  ensures { forall i j: int. 0 <= i <= j < length a -> a[i] <= a[j] }
  ensures { permut_all (old a) a }
  = if length a > 0 then stoogesort a 0 (length a)

end
