module PrototypeChan

use import array.Array
use import map.Map as M
use import int.Int

type id

type chan 'a model { contents: map int 'a; mutable pointer: int; id: id }

type state model { mutable program_counter: id }

val this: state

predicate synced id id int

predicate (=>) (s: state) (q: chan ~'a) 
  = synced s.program_counter q.id q.pointer

function (::) (s: state) (q: chan ~'a): state
axiom union_neutral:
  forall s: state, q r: chan 'a. (s=>r) -> (s::q)=>r
axiom union_reflexive:
  forall s: state, q: chan 'a. (s::q) => q

val (::) (s: state) (q: chan ~'a): unit
writes { s }
ensures { s = old s :: q }

predicate progress (q: chan ~'a)
 = exists s: state. s => q

function enqueued (x: 'a) (q: chan 'a): chan 'a = { contents=q.contents[q.pointer<-x]; pointer=q.pointer+1; id=q.id }

function get (q: chan ~'a) (i: int): 'a = M.get q.contents i
function elem (q: chan ~'a): map int 'a = q.contents
function ([]) (q: chan ~'a) (i: int): 'a = get q i

predicate fresh (q: chan ~'a) = q.pointer = 0

val make unit: chan 'a
ensures { fresh result }

val float (q: chan ~'a): unit
writes { q.pointer }
ensures { q.pointer >= 0 }
(* ensures { q.pointer >= old q.pointer >= 0 } *)

function current (q: chan ~'a): 'a = M.get q.contents q.pointer

(*
val enqueue (x: ~'a) (q: chan ~'a): unit
writes { q.pointer }
ensures { old (current q) = x }
ensures { q.pointer = old q.pointer + 1 }

let dequeue (q: chan ~'a): 'a
writes { q.pointer }
ensures { old (current q) = result }
ensures { q.pointer = old q.pointer + 1 }
 = let x = any 'a in enqueue x q; x
*)

function cursor (q: chan ~'a): int = q.pointer

predicate handled (q: chan ~'a)
predicate closed (q: chan ~'a)

val send (x: ~'a) (q: chan ~'a) (ready: state): unit
writes { q.pointer }
writes { ready }
requires { ready => q }
ensures { q = enqueued x (old q) }
ensures { handled (old q) }

let recv (q: chan ~'a) (ready: state): 'a
writes { q.pointer }
writes { ready }
requires { ready => q }
ensures { q = enqueued result (old q) }
ensures { handled (old q) }
 = let x = any 'a in send x q ready; x

val ([<-]) (q: chan ~'a) (b a: state): unit
requires { a => q }
requires { b => q }
writes { q.pointer }
writes { a }
writes { b }
ensures { handled (old q) }
ensures { q.pointer = old q.pointer+1 }

(*
val productive (q: chan int): bool
requires { ready => q \/ closed q }
ensures { result <-> ready => q }
ensures { not result <-> closed q }
*)

end

module Mem

use import PrototypeChan
use import int.Int

predicate mem (e: 'a) (q: chan 'a) = exists i: int. 0 <= i < cursor q /\ q[i] = e

function slice (q: chan 'a) (n: int): chan 'a = { contents = q.contents; pointer = n; id = q.id }

lemma mem_0: forall x: 'a, q: chan 'a.
  cursor q >= 0 -> mem x (enqueued x q)

lemma mem_S: forall x y: 'a, q: chan 'a.
  mem x q -> mem x (enqueued y q)

end
