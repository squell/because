module ImmutableQueue

use import array.Array
use import map.Map
use import int.Int

type queue 'a model { contents: map int 'a; mutable pointer: int }
  invariant { 0 <= self.pointer }

function elem (q: queue ~'a): array 'a
  = { length = q.pointer; elts = q.contents }

function current (q: queue ~'a): 'a = get q.contents q.pointer

val enqueue (x: ~'a) (q: queue ~'a): unit
writes { q.pointer }
ensures { old (current q) = x }
ensures { q.pointer = old q.pointer + 1 }

let dequeue (q: queue ~'a): 'a
writes { q.pointer }
ensures { old (current q) = result }
ensures { q.pointer = old q.pointer + 1 }
 = let x = any 'a in enqueue x q; x

end
