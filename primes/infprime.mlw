module InfinitePrimes

use import int.Int
use import number.Prime
use import number.Divisibility
use import ref.Ref

let lemma finite_contradiction (n: int): unit
requires { forall p: int. prime p -> p <= n }
ensures { false }
  = let prod = ref 1 in
    for i = 1 to n do
      invariant { forall p: int. prime p /\ p < i -> divides p !prod }
      invariant { !prod > 0 }
      prod := !prod * i
    done;
    prod := !prod + 1;
    assert { not prime !prod };
    assert { exists p: int. prime p /\ divides p !prod };
    assert { exists p: int. prime p /\ divides p 1 };

goal Euclid:
   forall n: int. exists p: int. p > n /\ prime p

end
