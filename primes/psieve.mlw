module Mem

use import pipe.PrototypeQueue
use import int.Int

predicate mem (e: 'a) (q: queue 'a) = exists i: int. 0 <= i < cursor q /\ q[i] = e

function slice (q: queue 'a) (n: int): queue 'a = { contents = q.contents; pointer = n }

lemma mem_0: forall x: 'a, q: queue 'a.
  cursor q >= 0 -> mem x (enqueued x q)

lemma mem_S: forall x y: 'a, q: queue 'a.
  mem x q -> mem x (enqueued y q)

end

theory Induct

use import pipe.PrototypeQueue
use import int.Int
use HighOrd

(* this is fine for 'single' channels, but what if two channels react to eachother? *)

predicate chaninv (p: queue 'a->bool) (q: queue 'a) =
  forall i: int. 0 <= i < cursor q ->
    p { contents = q.contents; pointer = i }

end

theory Occ

use import pipe.PrototypeQueue
use import int.Int
use map.Occ as M
use import Mem

function occ (e: 'a) (q: queue 'a): int = M.occ e q.contents 0 (q.cursor)

lemma occ_bounds:
  forall x: 'a, q: queue 'a. 0 <= cursor q -> 0 <= occ x q <= cursor q

lemma occ_mem_correspondence:
  forall x: 'a, q: queue 'a. mem x q <-> occ x q > 0

end

theory OrderedQueue

use pipe.PrototypeQueue as Q
use import int.Int

type t
predicate rel t t

axiom rel_transitive:
  forall x y z: t. rel x y /\ rel y z -> rel x z

predicate ordered (q: Q.queue t) = forall a b: int. 0 <= a < b < Q.cursor q -> rel (Q.get q a) (Q.get q b)

lemma mono_O: forall q: Q.queue t. Q.fresh q -> ordered q
lemma mono_S: forall x: t, q: Q.queue t. ordered q -> rel (Q.get q (Q.cursor q-1)) x -> ordered (Q.enqueued x q)

end



module PrimeNumberSieve

use import number.Divisibility
use import number.Prime
use import pipe.PrototypeQueue as Q
use import promise.GlobalPromise

axiom readiness: forall q: queue 'a. ready q <-> eventually -> handled q

predicate go_prefix_init (x: int) (src: queue int) (dst: queue int) =
  ready dst

(* vacuous, but for completeness *)
predicate go_prefix_req_1 (x: int) (src: queue int) (dst: queue int) = true
predicate go_prefix_req_2 (x: int) (src: queue int) (dst: queue int) = true

predicate go_prefix_inv_1 (x: int) (src: queue int) (dst: queue int) =
  ready dst

predicate go_prefix_inv_2 (x: int) (src: queue int) (dst: queue int) =
 ( dst[0] = x /\ forall i: int. 1 <= i < cursor dst -> dst[i] = src[i-1] )
 /\
 ( cursor dst = cursor src+1 )
 /\
 ready src

val go_prefix_1 (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_prefix_1" go_prefix_req_1 head src dst }
ensures  { go_prefix_inv_1 head src dst }
val go_prefix_1_mk (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_prefix_1" go_prefix_inv_1 head src dst }
ensures  { go_prefix_req_1 head src dst }
val go_prefix_2 (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_prefix_2" go_prefix_req_2 head src dst }
ensures  { go_prefix_inv_2 head src dst }
val go_prefix_2_mk (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_prefix_2" go_prefix_inv_2 head src dst }
ensures  { go_prefix_req_2 head src dst }

let prefix (head: int) (src: queue int) (dst: queue int): unit
requires { fresh src }
requires { fresh dst }
diverges
 =  init ();
    reachable (any bool ensures { result <-> handled dst });
    assert { go_prefix_init head src dst };
    enqueue head dst;
    reachable (any bool ensures { result <-> handled src });
    go_prefix_2_mk head src dst;
    while true do
        invariant { go_prefix_inv_2 head src dst }
        invariant { ready src }
        invariant { ?obligation <-> handled src }
'Begin:
        let n = dequeue src in
        reachable (any bool ensures { result <-> handled dst });
	go_prefix_1_mk head src dst;
        enqueue n dst;
        reachable (any bool ensures { result <-> handled src });
	go_prefix_2_mk head src dst;
        check { "expl:conditional variant decrease"
            not (at ?obligation) 'Begin ->
	    0 <= at (0) 'Begin /\ (0) < at (0) 'Begin
        }
    done;
    check { "expl:reachability" ?obligation }

use import Mem

let lemma go_prefix_inv_step (x: int) (src dst: queue int): unit
requires { go_prefix_inv_2 x src dst }
ensures { forall i: int. 0 <= i < cursor src -> exists j: int [i+1]. 0 <= j < cursor dst /\ dst[j] = src[i] }
 = assert { forall i: int. 0 <= i < cursor src -> src[i] = dst[i+1] }

lemma go_prefix_inv_eq: forall x: int. forall src dst: queue int.
  cursor dst > 0 -> go_prefix_inv_2 x src dst ->
  forall y: int.  mem y dst <-> mem y src \/ x = y

predicate go_sieve_init (src dst: queue int) =
(*
  ready src
*)
  true

predicate go_sieve_req_1 (src dst: queue int) =
   forall x: int. mem x src -> 2 <= x /\ forall d: int. 2 <= d -> divides d x -> mem d src

predicate go_sieve_req_2 (src dst: queue int) = true

predicate go_sieve_inv_1 (src dst: queue int) =
   ((exists x: int. mem x src /\ prime x /\ not mem x dst) -> ready dst)
(*
  /\
   ((forall x: int. mem x src /\ prime x -> mem x dst) -> ready src)
*)

predicate go_sieve_inv_2 (src dst: queue int) =
   (forall x: int. mem x dst <-> mem x src /\ prime x)
  /\
   (forall i j: int. 0 <= i < j < cursor dst -> dst[i] <> dst[j])
(*
  /\
   ready src
*)

val go_sieve_1 (src: queue int) (dst: queue int): unit
requires { "expl:go_sieve_1" go_sieve_req_1 src dst }
ensures  { go_sieve_inv_1 src dst }
val go_sieve_1_mk (src: queue int) (dst: queue int): unit
requires { "expl:go_sieve_1" go_sieve_inv_1 src dst }
ensures  { go_sieve_req_1 src dst }
val go_sieve_2 (src: queue int) (dst: queue int): unit
requires { "expl:go_sieve_2" go_sieve_req_2 src dst }
ensures  { go_sieve_inv_2 src dst }
val go_sieve_2_mk (src: queue int) (dst: queue int): unit
requires { "expl:go_sieve_2" go_sieve_inv_2 src dst }
ensures  { go_sieve_req_2 src dst }

(*
channel ownership:
	reader		writer
src:	me		(caller)
dst:	(caller)		child: prefix
dst2:	child: prefix	child: sieve
filt:	child: sieve	me

 => inviolable channels: dst and dst2
*)

(* it is interesting to see how this affects CVC4
clone OrderedQueue with type t = int, predicate rel = (<)
*)

let sieve (src: queue int) (dst: queue int): unit
requires { divergence }
requires { fresh src }
requires { fresh dst }
diverges
  = init ();
(*
    reachable (any bool ensures { result <-> handled src });
*)
    assert { go_sieve_init src dst };
    let p = dequeue src in
(*
    reachable (any bool ensures { result <-> handled src });
*)
    reachable (any bool ensures { result <-> handled dst });
    go_sieve_1_mk src dst;
assert { prime p };
    let filt = make(): queue int in
    let dst2 = make(): queue int in
    (* go prefix p dst2 dst *)			(* 1 *)
    assume { go_prefix_init p dst2 dst };

    assume { ready dst -> handled dst };        (* TODO FIXME *)

    (* go sieve filt dst2 *)			(* 2 *)
    assert { "expl:go_sieve_req" go_sieve_req_1 filt dst2 };
    assert { "expl:go_sieve_req" go_sieve_req_2 filt dst2 };
    assume { go_sieve_init filt dst2 };

    while true do
invariant { src.pointer >= 0 }
invariant { dst.pointer >= 0 }
invariant { dst2.pointer >= 0 }
invariant { filt.pointer >= 0 }
(*
        invariant { go_prefix_inv_1 p dst2 dst }  (* vacuous *)
        invariant { go_prefix_inv_2 p dst2 dst }  (* this should use 'at p ...' if p is mutable *)
        invariant { go_sieve_req_1 filt dst2 }
        invariant { go_sieve_inv_1 filt dst2 } (* vacuous *)
        invariant { go_sieve_req_2 filt dst2 } (* vacuous *)
        invariant { go_sieve_inv_2 filt dst2 }
        invariant { go_sieve_req_1 src dst }
        invariant { go_sieve_inv_1 src dst } (* vacuous *)
        invariant { go_sieve_req_2 src dst } (* vacuous *)
        invariant { go_sieve_inv_2 src dst }
*)
invariant { forall x: int. mem x src /\ not (divides p x) -> mem x filt }
invariant { forall x: int. mem x filt -> mem x src /\ forall d: int. 2 <= d -> divides d x -> mem d filt }
invariant { forall x: int. mem x filt -> p <> x }
(*
invariant { ready src }
invariant { ready filt }
invariant { ?obligation <-> handled src }
*)
invariant { ((exists x: int. mem x src /\ prime x /\ not mem x dst) -> ready dst) } 
invariant { ?obligation }
'Begin:
        let n = dequeue src in
(*
        reachable (any bool ensures { result <-> handled src });
*)
        reachable (any bool ensures { result <-> prime n /\ not mem n dst -> handled dst });
        go_sieve_1_mk src dst;
        if not (divides p n) then (
assert { forall x: int. mem x src /\ not (divides p x) /\ x < n -> mem x filt };
assert { forall x: int. mem x (enqueued n filt) -> p <> x };
            enqueue n filt;
 abstract ensures { forall x: int. mem x filt -> 2 <= x /\ forall d: int. 2 <= d -> divides d x -> mem d filt }
   ()
 end;
assume { prime n /\ not mem n dst -> handled dst }; (* TODO FIXME *)
            float dst2;                                                  (* 2 *)
            float dst;                                                   (* 1 *)
            go_sieve_1 filt dst2;                                        (* 2 *)
            go_sieve_2 filt dst2;                                        (* 2 *)
	    go_prefix_1 p dst2 dst;                                      (* 1 *)
	    go_prefix_2 p dst2 dst;                                      (* 1 *)
 abstract ensures { forall x: int. mem x dst <-> mem x src /\ prime x }
   (* these are not necessary, but speed up the prover *)
   assert { forall x: int. mem x dst2 -> mem x filt };
   assert { forall x: int. mem x dst2 -> mem x src };
   ()
 end;
(*
 abstract ensures { ready src }
   ()
 end;
*)
            go_sieve_2_mk src dst;                                       (* ? *)
        )
else assume { ready dst -> handled dst }; (* TODO FIXME *);
        check { "expl:conditional variant decrease"
            not (at ?obligation) 'Begin ->
	    0 <= at (0) 'Begin /\ (0) < at (0) 'Begin
        };
    done;
    check { ?obligation }

predicate go_generator_init (out: queue int) =
  ready out
 /\
  forall i: int. 0 <= i < cursor out -> out[i] = 2+i

predicate go_generator_req (out: queue int) = true
predicate go_generator_inv (out: queue int) = go_generator_init out

val go_generator (out: queue int): unit
requires { "expl:go_generator" go_generator_req out }
ensures { go_generator_inv out }
val go_generator_mk (out: queue int): unit
requires { "expl:go_generator" go_generator_inv out }
ensures { go_generator_req out }

use import ref.Refint

let generator (out: queue int) =
requires { fresh out }
diverges
    init ();
    reachable (any bool ensures { result <-> handled out });
    assert { go_generator_init out };
    let x = ref 2 in
    while true do
        invariant { ready out }
        invariant { go_generator_inv out }
        invariant { !x = 2 + cursor out }
        invariant { ?obligation <-> handled out }
'Begin:
        enqueue !x out;
        reachable (any bool ensures { result <-> handled out });
        go_generator_mk out;
        x += 1;
        check { "expl:conditional variant decrease"
            not (at ?obligation) 'Begin ->
	    0 <= at (0) 'Begin /\ (0) < at (0) 'Begin
        }
    done;
    check { "expl:reachability" ?obligation }

(*
channel ownership:
	reader		writer
inp:	child:sieve	child:generator
outp:	me		child:sieve

 => inviolable channels: inp
*)

let lemma go_generator_inv_eq (x: int) (q: queue int)
requires { go_generator_inv q }
ensures { 2 <= x < cursor q+2 <-> mem x q }
 = assert { 2 <= x < cursor q+2 -> q[x-2] = x }

constant max_prime: int = 25000

exception Break

use import infprime.NextPrime

let main unit =
    let outp = make(): queue int in
    let inp  = make(): queue int in
    (* go func() { ... } *)
    assume { go_generator_init inp };
    assume { go_sieve_init inp outp };
  try
    while true do
invariant { inp.pointer >= 0 }
invariant { outp.pointer >= 0 }
        invariant { go_generator_inv inp }   (* not necessary, but speeds things up *)
        invariant { go_sieve_inv_2 inp outp }
        variant { max_prime - cursor inp }   (* TODO: try different variants *)
'Begin:

        (* float inp; *)
abstract
ensures { inp.pointer >= 0 }
ensures { go_generator_req inp }
ensures { go_generator_inv inp }
ensures { go_sieve_inv_1 inp outp }
ensures { go_sieve_req_1 inp outp }
ensures { ready outp }
        if not any bool ensures { result = ready outp } then (
assert { "expl:obvious" forall x: int. mem x inp /\ prime x <-> mem x outp };
           crank inp;
           go_generator inp;
           go_sieve_1 inp outp;
(* 'Fwd: *)
           while not any bool ensures { result = ready outp } do
invariant { inp.pointer >= 0 }
invariant { outp.pointer >= 0 }
	       invariant { go_generator_req inp }
	       invariant { go_generator_inv inp }
	       invariant { go_sieve_req_1 inp outp }
	       invariant { go_sieve_inv_1 inp outp }
(* also works:
   invariant { inp[cursor inp-1] <= at (some_larger_prime (inp[cursor inp-1])) 'Fwd }
   variant { at (some_larger_prime (inp[cursor inp-1])) 'Fwd - cursor inp } *)
invariant { cursor inp > 0 }
invariant { forall x: int. mem x outp -> x < inp[cursor inp-1] }
variant { next_prime (inp[cursor inp-1]) - cursor inp }
(* assert { not prime inp[cursor inp-1] }; *)
	       crank inp;
	       go_generator inp;
	       go_sieve_1 inp outp;
           done;
        );
end;

        let n = dequeue outp in
        go_sieve_2 inp outp;

        if n >= max_prime then
            raise Break;

        check { prime n };
        (* this assert speeds up the next assert -- not necessary *)
        assert { mem n (at inp 'Begin) -> mem n (at outp 'Begin) };
        (* this assert was guessed (see below) -- not necessary if we make 'float' more-defined *)
        assert { not (mem n (at inp 'Begin)) };
(*
  (* the following mess is not necessary -- it is just to guess what CVC4 is up to *)
  abstract ensures { max_prime >= at (cursor inp) 'Begin }
    abstract ensures { not (mem n (at inp 'Begin)) }
      assert { mem n (at inp 'Begin) -> mem n (at outp 'Begin) };
      assert { mem n (at outp 'Begin) -> exists i j. 0 <= i < j < cursor outp /\ outp[i] = outp[j] };
    end;
    assert { let ptr = at (cursor inp) 'Begin in ptr > 1 -> n >= inp[ptr-1] };
    assert { let ptr = at (cursor inp) 'Begin in ptr > 1 -> inp[ptr-1] >= inp[ptr-2] };
    assert { let ptr = at (cursor inp) 'Begin in ptr > 1 -> n >= inp[ptr-2] };
    assert { let ptr = at (cursor inp) 'Begin in ptr > 1 -> n >= ptr };
    assert { max_prime > n };
  end;
  abstract ensures { at (cursor inp) 'Begin < cursor inp }
    abstract ensures { not (mem n (at inp 'Begin)) }
      assert { mem n (at inp 'Begin) -> mem n (at outp 'Begin) };
      assert { mem n (at outp 'Begin) -> exists i j. 0 <= i < j < cursor outp /\ outp[i] = outp[j] };
    end;
    assert { mem n inp };
    assert { cursor inp <= at (cursor inp) 'Begin -> mem n (at inp 'Begin) };
  end;
*)
    done
  with Break ->
    ()
  end

end


module ProofTest

(* what happens if we use two different versions of 'prefix' to
   compute fibonacci numbers, without explicit synchronization? *)

use import PrimeNumberSieve
use import pipe.PrototypeQueue
use import int.Int
use import int.Fibonacci
use import ref.Ref
use import Mem

axiom fiat: divergence

(* this function is correct *)
let prefix_test_1 ()
 = let src = make(): queue int in
   let dst = make(): queue int in
   let limit = any int ensures { result >= 0 } in
   let y = ref 0 in
   let n = 1 in
   (* go prefix n src dst *)
   assert { fresh src };
   assert { fresh dst };

   for i = 1 to limit do
invariant { src.pointer >= 0 }
invariant { dst.pointer >= 0 }
      invariant { forall j: int. 0 <= j < cursor src -> src[j] = fib j }
      invariant { !y = fib (i-1) }
      invariant { cursor src = i-1 }
      let z = !y in
      y := !y + dequeue dst;
      go_prefix_2 n src dst;
      enqueue z src;
      go_prefix_1 n src dst;
   done;
   check { "expl:result" !y = fib limit }

(* incorrect, and doesn't verify in 'unsafe mode' *)
let prefix_test_2 ()
 = let src = make(): queue int in
   let dst = make(): queue int in
   let limit = any int ensures { result >= 0 } in
   let y = ref 0 in
   let n = 1 in
   (* go prefix n src dst *)
   assert { fresh src };
   assert { fresh dst };

   for i = 1 to limit do
invariant { src.pointer >= 0 }
invariant { dst.pointer >= 0 }
      invariant { forall j: int. 0 <= j < cursor src -> src[j] = fib j }
      invariant { !y = fib (i-1) }
      invariant { cursor src = i-1 }
      enqueue !y src;
      go_prefix_1 n src dst;
      y := !y + dequeue dst;
      go_prefix_2 n src dst;
   done;
   check { "expl:result" !y = fib limit }

predicate go_profix_req_1 (x: int) (src: queue int) (dst: queue int) = true
predicate go_profix_req_2 (x: int) (src: queue int) (dst: queue int) = true
predicate go_profix_inv_1 (x: int) (src: queue int) (dst: queue int) = true

predicate go_profix_inv_2 (x: int) (src: queue int) (dst: queue int) =
 ( dst[0] = x /\ forall i: int. 1 <= i < cursor dst -> dst[i] = src[i-1] )
 /\
 ( cursor dst = cursor src )

val go_profix_1 (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_profix_1" go_profix_req_1 head src dst }
ensures  { go_profix_inv_1 head src dst }
val go_profix_1_mk (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_profix_1" go_profix_inv_1 head src dst }
ensures  { go_profix_req_1 head src dst }
val go_profix_2 (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_profix_2" go_profix_req_2 head src dst }
ensures  { go_profix_inv_2 head src dst }
val go_profix_2_mk (head: int) (src: queue int) (dst: queue int): unit
requires { "expl:go_profix_2" go_profix_inv_2 head src dst }
ensures  { go_profix_req_2 head src dst }

let profix (head: int) (src: queue int) (dst: queue int): unit
requires { fresh src }
requires { fresh dst }
diverges
 =  let m = ref head in
    while true do
invariant { src.pointer >= 0 }
invariant { dst.pointer >= 0 }
        invariant { cursor src > 0 -> !m = src[cursor src-1] }
        invariant { cursor src = 0 -> !m = head }
        invariant { cursor src = cursor dst }
        invariant { forall i: int. 0 <= i < cursor dst -> dst[0] = head /\ (i > 0 -> dst[i] = src[i-1]) }
        let n = dequeue src in
	go_profix_1_mk head src dst;
        assert { cursor dst = 0 -> !m = head };
        enqueue !m dst;
	go_profix_2_mk head src dst;
        m := n
    done

(* correct *)
let prefix_test_3 ()
 = let src = make(): queue int in
   let dst = make(): queue int in
   let limit = any int ensures { result >= 0 } in
   let y = ref 0 in
   let n = 1 in
   (* go profix n src dst *)
   assert { fresh src };
   assert { fresh dst };

   for i = 1 to limit do
invariant { src.pointer >= 0 }
invariant { dst.pointer >= 0 }
      invariant { forall j: int. 0 <= j < cursor src -> src[j] = fib j }
      invariant { !y = fib (i-1) }
      invariant { cursor src = i-1 }
      enqueue !y src;
      go_profix_1 n src dst;
      y := !y + dequeue dst;
      go_profix_2 n src dst;
   done;
   check { "expl:result" !y = fib limit }

end
