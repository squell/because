module PrimeNumberSieve

use import number.Divisibility
use import number.Prime
use import pipe.ImmutableQueue
use HighOrd as HO

predicate go_prefix_inv (x: int) (src: queue int) (dst: queue int) =
 ( dst[0] = x /\ forall i: int. 1 <= i < cursor dst -> dst[i] = src[i-1] )
/\
 ( cursor dst = cursor src+1 )

let prefix (head: int) (src: queue int) (dst: queue int): unit
requires { fresh src }
requires { fresh dst }
diverges
 =  enqueue head dst;
    assert { go_prefix_inv head src dst };	(* or check ? *)
    while productive src do
        invariant { go_prefix_inv head src dst }
        let n = dequeue src in
        enqueue n dst;
        assert { go_prefix_inv head src dst }
   done

predicate mem (e: 'a) (q: queue 'a) = exists i: int. 0 <= i < cursor q /\ q[i] = e

lemma mem_0: forall x: 'a, q: queue 'a. 
  cursor q >= 0 -> mem x (enqueued x q)

lemma mem_S: forall x y: 'a, q: queue 'a.
  mem x q -> mem x (enqueued y q)

predicate monotone (q: queue int) = forall a b: int. 0 <= a < b < cursor q -> q[a] < q[b]

lemma mono_O: forall q: queue int. fresh q -> monotone q
lemma mono_S: forall x: int, q: queue int. monotone q -> x > q[cursor q-1] -> monotone (enqueued x q)

predicate go_sieve_req (src dst: queue int) =
   forall x: int. mem x src -> 2 <= x /\ forall d: int. 2 <= d -> divides d x -> mem d src

predicate go_sieve_inv (src dst: queue int) =
   (forall x: int. mem x dst <-> mem x src /\ prime x)
  /\
   (forall i j: int. 0 <= i < j < cursor dst -> dst[i] <> dst[j])

let lemma go_prefix_inv_step (x: int) (src dst: queue int): unit
requires { go_prefix_inv x src dst }
ensures { forall i: int. 0 <= i < cursor src -> exists j: int [i+1]. 0 <= j < cursor dst /\ dst[j] = src[i] }
 = assert { forall i: int. 0 <= i < cursor src -> src[i] = dst[i+1] }

lemma go_prefix_inv_eq: forall x: int. forall src dst: queue int. 
  cursor dst > 0 -> go_prefix_inv x src dst ->
  forall y: int.  mem y dst <-> mem y src \/ x = y

(*
channel ownership:
	reader		writer
src:	me		(caller)
dst:	(caller)		child: prefix
dst2:	child: prefix	child: sieve
filt:	child: sieve	me

 => inviolable channels: dst and dst2
*)

let sieve (src: queue int) (dst: queue int): unit
requires { fresh src }
requires { fresh dst }
diverges
  = let p = dequeue src in
    assume { go_sieve_req src dst };
assert { prime p };
    let filt = make(): queue int in
    let dst2 = make(): queue int in
    (* go prefix p dst2 dst *)			(* 1 *)
    float dst2;
    float dst;
    assume { go_prefix_inv p dst2 dst }; 
    
    (* go sieve filt dst2 *)		        (* 2 *)
    assert { "expl:go_sieve_req" go_sieve_req filt dst2 };
    float dst2;
    float dst;
    assume { go_sieve_inv filt dst2 };
    assume { go_prefix_inv p dst2 dst };

    while productive src do
invariant { src.pointer >= 0 }        
invariant { dst.pointer >= 0 }        
invariant { dst2.pointer >= 0 }        
invariant { filt.pointer >= 0 }        
        invariant { go_sieve_req filt dst2 }
        invariant { go_sieve_inv filt dst2 }
        invariant { go_prefix_inv p dst2 dst }  (* this should use 'at p ...' if p is mutable *)
        invariant { go_sieve_req src dst }
        invariant { go_sieve_inv src dst }

invariant { forall x: int. mem x src /\ not (divides p x) -> mem x filt }
invariant { forall x: int. mem x filt -> mem x src /\ forall d: int. 2 <= d -> divides d x -> mem d filt }
invariant { forall x: int. mem x filt -> p <> x }

        let n = dequeue src in
        assume { go_sieve_req src dst };
        if not (divides p n) then (
assert { forall x: int. mem x src /\ not (divides p x) /\ x < n -> mem x filt };
assert { forall x: int. mem x (enqueued n filt) -> p <> x };
            enqueue n filt;
 abstract ensures { forall x: int. mem x filt -> 2 <= x /\ forall d: int. 2 <= d -> divides d x -> mem d filt }
   ()
 end;
            assert { "expl:go_sieve_req" go_sieve_req filt dst2 };	 (* 2 *)
            float dst2;                          (* 2 *)
            float dst;                           (* 1 *)
            assume { go_sieve_inv filt dst2 };   (* 2 *)
            assume { go_prefix_inv p dst2 dst }; (* 1 *)
 abstract ensures { forall x: int. mem x dst <-> mem x src /\ prime x }
   (* these are not necessary, but speed up the prover *)
   assert { forall x: int. mem x dst2 -> mem x filt };
   assert { forall x: int. mem x dst2 -> mem x src };
   ()
 end;
            assert { "expl:go_sieve_inv" go_sieve_inv src dst };     (* ? *)
        ) 
    done

use import ref.Refint

predicate go_generator_inv (out: queue int) =
  forall i: int. 0 <= i < cursor out -> out[i] = 2+i

let generator (out: queue int) =
requires { fresh out }
diverges
    let x = ref 2 in
    while true do 
        invariant { go_generator_inv out }
        invariant { !x = 2 + cursor out }
        enqueue !x out;
        assert { go_generator_inv out };
        x += 1
    done

(*
channel ownership:
	reader		writer
inp:	child:sieve	child:generator
outp:	me		child:sieve

 => inviolable channels: inp
*)

constant max_prime: int = 25000

exception Break

let main unit =
    let outp = make(): queue int in
    let inp  = make(): queue int in
    (* go func() { ... } *)
  try
    while productive outp do
invariant { inp.pointer >= 0 }
invariant { outp.pointer >= 0 }
        invariant { go_sieve_inv inp outp }
        variant { max_prime - outp[cursor outp-1] }
'Begin:
        let n = dequeue outp in 
        assume { go_generator_inv inp };
        assert { go_sieve_req inp outp };
        assume { go_sieve_inv inp outp };
        if n >= max_prime then 
            raise Break;
        assert { prime n };
    done
  with Break ->
    ()
  end

end

