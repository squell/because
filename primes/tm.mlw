(*
    Exploring 'conditional termination' using a 'one shot promise' and a 'many time promise'
 *)

module AbstractTuringMachine

use import int.Int
use import set.SetComprehension

type machine

predicate halted (m: machine) (step: int)

predicate halting (m: machine) = exists i: int. 0 <= i /\ halted m i

function steps (m: machine): int
 = choose (comprehension (\i. 0 <= i /\ halted m i))

lemma steps_def: forall m. halting m -> 0 <= steps m /\ halted m (steps m)

end

module StaticHaltingProblem

use import pipe.PrototypeQueue
use import AbstractTuringMachine
use import ref.Ref
use import int.Int
use import promise.Promise

predicate go_decide_init (m: machine) (q: queue unit)
 = halting m -> ready q
predicate go_decide_req (m: machine) (q: queue unit)
 = true
predicate go_decide_inv (m: machine) (q: queue unit)
 = true

val go_decide_mk (m: machine) (q: queue unit): unit
requires { go_decide_inv m q }
ensures { go_decide_req m q }
val go_decide (m: machine) (q: queue unit): unit
requires { go_decide_req m q }
ensures { go_decide_inv m q }

let decide (m: machine) (signal: queue unit): unit
diverges
 = let ghost promise = any obligation ensures { entangled ?result (halting m -> handled signal) } in
   assume { halting m -> ready signal };
   assert { go_decide_init m signal };
   let i = ref 0 in
   while not (halted m !i) do
     invariant { 0 <= !i }
     invariant { halting m -> !i <= steps m }
     (* variant { steps m - !i } unless { ?promise } *)
'Begin:
     i := !i + 1;
     check { 
	"expl:conditional decrease"
		not (at ?promise 'Begin)
	->
		0 <= at (steps m - !i) 'Begin 
			/\
		(steps m - !i) < at (steps m - !i) 'Begin 
     };
   done;
   enqueue () signal;
   go_decide_mk m signal;
   check { ?promise }

let test (m: machine)
requires { halting m }
 = let ch = make(): queue unit in
   (* go decide m ch *)
   assume { go_decide_init m ch };
   dequeue ch;
   go_decide m ch

end

module DynamicHaltingProblem

use import pipe.PrototypeQueue
use import AbstractTuringMachine
use import ref.Ref
use import int.Int
use import promise.Promise

predicate go_decide_init (q: queue machine)
 = ready q
predicate go_decide_req (q: queue machine)
 = true
predicate go_decide_inv (q: queue machine)
 = halting q[cursor q-1] -> ready q        (* won't verify "ready q", which is good! *)

val go_decide_mk (q: queue machine): unit
requires { go_decide_inv q }
ensures { go_decide_req q }
val go_decide (q: queue machine): unit
requires { go_decide_req q }
ensures { go_decide_inv q }

let run (m: machine): bool
diverges
ensures { result <-> halting m }
 = let i = ref 0 in
   while not (halted m !i) do
     invariant { 0 <= !i }
     i := !i + 1
   done;
   true

let decide (signal: queue machine): unit
requires { fresh signal }
diverges
 = let ghost promise = any obligation ensures { entangled ?result (handled signal) } in
   assume { ready signal };
   assert { go_decide_init signal };
   let continue = ref true in
   while !continue do
invariant { signal.pointer >= 0 }
     invariant { !continue -> ready signal }
     invariant { !continue -> ?promise = handled signal }
     invariant { not !continue -> ?promise }
     (* variant { 0 } unless { ?promise } *)
'Begin:
     let m = dequeue signal in
     let ghost smallpromise = any obligation ensures { entangled ?result (halting signal[cursor signal-1] -> handled signal) } in
     assume { halting signal[cursor signal-1] -> ready signal };
     go_decide_mk signal;
     continue := run m;
     if !continue then (
	     reissue promise;
	     assume { entangled ?promise (handled signal) };
	     assume { ready signal };
     );
     delegate promise smallpromise; 
     check { 
	"expl:conditional decrease"
		not (at ?promise 'Begin)
	->
		0 <= at (0) 'Begin 
			/\
		(0) < at (0) 'Begin 
     };
     check { ?smallpromise }
   done;
   check { ?promise }

let test (m: machine)
 = let ch = make(): queue machine in
   (* go decide m ch *)
   assume { go_decide_init ch };
   let m = any machine ensures { halting result } in
   enqueue m ch;
   go_decide ch;
   let m = any machine in
   enqueue m ch;
   go_decide ch

end
