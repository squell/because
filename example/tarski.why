theory KnasterTarski 

type t

use import set.SetComprehension

function intersect (fam: set (set t)): set t
  = comprehension (\x: t. forall y:set t. mem y fam -> mem x y)

function f (set t): set t

axiom f_is_monotonic:
  forall x y: set t. subset x y -> subset (f x) (f y)

constant prefixpoints: set (set t) = 
  comprehension (\x: set t. subset (f x) x)

constant mu: set t = intersect prefixpoints

lemma intersect_common_subset:
  forall fam: set (set t).
    forall x: set t. mem x fam -> subset (intersect fam) x

lemma intersect_greatest_common_subset:
  forall fam: set (set t),  s: set t.
    (forall x: set t. mem x fam -> subset s x) -> subset s (intersect fam)

lemma fmu_subset_of_mu:
  subset (f mu) mu

lemma mu_subset_of_fmu:
  subset mu (f mu)

lemma mu_is_fixpoint:
  f mu == mu

goal fixpoint: exists x:set t. f x = x

end
