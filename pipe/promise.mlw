module TickCounter

use import int.Int
use import ref.Ref

val ghost ticks: ref int

let ghost tick (): unit
writes { ticks }
ensures { !ticks = old (!ticks) + 1 }
 = ticks := !ticks + 1

end

module Promise

use import int.Int
use import ref.Ref

type obligation

function timeout obligation: int

predicate satisfied obligation

val promise (t: int): obligation
requires { t >= 0 }
ensures { timeout result >= t }

val satisfy (o: obligation): unit
ensures { satisfied o }

end

module Test

use import Promise
use import int.Int
use import ref.Ref
use HighOrd as HO
use TickCounter as T

let test_reach () =
    let reachme = promise 50 in
'L:
    for x = 1 to 100 do
        invariant { x = !T.ticks - (at !T.ticks 'L) + 1 } (* because this is a demo *)
        invariant { !T.ticks - at !T.ticks 'L > timeout reachme -> satisfied reachme } (* proposed *)
        invariant { not satisfied reachme -> !T.ticks - at !T.ticks 'L <= timeout reachme } (* proposed *)
        invariant { x > 7 -> satisfied reachme } (* user-supplied *)
        if x >= 7 then (
            satisfy reachme
        );
        T.tick();
    done;
    check { satisfied reachme }

end
