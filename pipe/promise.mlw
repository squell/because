module Promise

type veilbool
function truthval veilbool: bool 

type obligation model { ghost mutable cookie: veilbool }

predicate satisfied (o: obligation) = truthval o.cookie

predicate entangled (a b: bool)
  = a <-> b
function (?) (o: obligation): bool 
  = satisfied o

val reissue (o: obligation): unit
requires { satisfied o }
writes { o }

val delegate (dst src: obligation): unit
requires { satisfied dst -> satisfied src }
ensures { satisfied src }

let (=>) (dst src: obligation): unit
requires { satisfied dst -> satisfied src }
ensures { satisfied src }
 = delegate dst src

end


module GlobalPromise

(* TODO: axiom relating obligations to eventually *)

type obligation model { ghost mutable value: bool }

constant eventually: bool

val obligation: obligation

function (?) (x: obligation): bool 
  = x.value

val ghost init (): unit
ensures { ?obligation }

val ghost reachable (x: bool): unit
writes { obligation }
reads { obligation }
ensures { ?obligation <-> x /\ old ?obligation }
ensures { eventually -> x }

end

module Test

use import ref.Ref
use import int.Int
use import Promise
use import number.Prime
use import infprime.NextPrime
use import set.SetComprehension
use HighOrd as HO

function main_variant (i: int): int
 = next_prime i - i

let prime_loop ()
diverges
 = let ghost reachme = any obligation in
   let count = ref 0 in
   let i = ref 2 in
   while true do 
     invariant { 2 <= !i }
'Begin:
     if prime !i then (
        count := !count + 1;
        assume { ?reachme };
        reissue reachme;
     );
     i := !i + 1;
     check {
	"expl:conditional decrease"
		not (at ?reachme 'Begin)
	->
		0 <= at (main_variant !i) 'Begin 
			/\
		(main_variant !i) < at (main_variant !i) 'Begin 
     };
   done;
   check { ?reachme }

end
